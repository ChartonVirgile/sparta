"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

create_isurf command :h3

[Syntax:]

create_isurf group-ID ablateID thresh mode ... :pre

group-ID = grid ID for which grid cells to perform calculation on :ulb,l
ablateID = ID of a "fix ablate"_fix_ablate.html command :l
thresh = threshold for corner values used to generate implicit surfaces, value > 0.0 and < 255.0 :l
mode = {inout} or {ave} = {inout} marks cells either in or out. {ave} smooths values by averaging expected corner points values based on intersections between the explicit surface and cell edge :l
:ule

[Examples:]

create_isurf     all fablate 40.0 inout
create_isurf     subset fablate 100.0 ave

[Description:]

Read and convert the geometry of a surface from the specified file. In 
SPARTA, a "surface" is a collection of surface elements that represent
the surface of one or more physical objects which will be embedded in
the global simulation box. 

This command converts explicit surfaces into implicit surfaces. Explicit
surfaces are read from a previous "read_surf" command. See
the "read_surf"_read_surf.html command to read explicit surfaces from
a different kind of file.  See the "How to
6.13"_Section_howto.html#howto_13 section of the manual for an
explantion of explicit versus implicit surfaces as well as distributed
versus non-distributed storage. You cannot mix explicit and implicit
surfaces in the same simulation. Thus, all explicit surfaces from all surface 
groups are converted, and no additional explicit surfaces can be added after
this command is called.

Surface elements are triangles in 3d or line segments in 2d.  Surface
elements for each physical object are required to be a complete,
connected set that tile the entire surface of the object.  
The surface elements in a single surface file must represent a
"watertight" surface.  For a 2d simulation this means that every point
is part of exactly 2 line segments.  For a 3d simulation it means that
every triangle edge is part of exactly 2 triangles.  Exceptions to
these rules allow for triangle edges (in 3d) that lie entirely in a
global face of the simulation box, or for line points (in 2d) that are
on a global edge of the simulation box.  This can be the case after
clipping, which allows for use of watertight surface object (e.g. a
sphere) that is only partially inside the simulation box, but which
when clipped to the box becomes non-watertight, e.g. half of a sphere. 
Implicit surfaces will always be watertight.

While not currently implemented, implicit surface elements can have a 
surface type that is defined in each grid cell.

Here are images of a 2D cirlce, 3D idealized rough surface, and
3D cone as explicit surfaces and converted to implicit
surfaces. For each pair, the left image is the explicit surface and the 
right image is the implicit surface.

:c,image(JPG/circle.png),image(JPG/eggcarton.png),image(JPG/cone.png)

:image()

Particles collide with surface elements as they advect.  Each surface
element is assigned to a collision model, specified by the
"surf_collide"_surf_collide.html command which affects how a particle
bounces off the surface.  Each surface element can optionally be
assigned to a reaction model, specified by the
"surf_react"_surf_react.html command which determines if any surface
chemistry occurs during a collision.  Statistics for each surface
element due to their interactions with particles can be tallied via
the "compute isurf/grid"_compute_isurf_grid.html command,
time-averaged via the "fix ave/grid"_fix_ave_grid.html command, and
ouput via the "dump surface"_dump.html command.


:line

The specified {group-ID} must be the name of a grid cell group, as
defined by the "group grid"_group.html command, which contains a set
of grid cells, all of which are the same size, and which comprise a
contiguous 3d array, with specified extent {Nx} by {Ny} by {Nz}.  For
2d simulations, {Nz} must be specified as 1, and the group must
comprise a 2d array of cells that is {Nx} by {Ny}. These are the grid
cells within which implicit surfaces will be created.

The specified {ablateID} is the fix ID of a "fix
ablate"_fix_ablate.html command which has been previously specified in
the input script.  It stores the grid corner point values for each
grid cell.  It also has the code logic for converting grid corner
point values to surface elements (line segments or triangles) and also
optinally allows for the surface to be ablated during a simulation due
to particles colliding with the surface elements.

IMPORTANT NOTE: The corner point values are a 2d or 3d regular array
which must be ordered as follows.  The x indices (1 to Nxfile) vary
fastest, then the y indices (1 to Nyfile), and the z indices slowest
(1 to Nzfile).  These will be assigned as corner points to each child
grid cell in the Nx by Ny by Nz simulation domain.  For mapping corner
points to grid cells, the ordering of the regular array of grid cells
in the simulation domain is the same: their x indices vary fastest,
then y, and their z indices very slowest.

The 8 corner point values (4 in 2d) for each grid cell are used with a
marching cubes algorithm (marching squares in 2d) to infer a set of
triangles (line segments in 2d) which are created in the grid cell. 

IMPORTANT NOTE: All triangles (line segments in 2d) created within the
same grid cell are assigned the same surface ID, which is the grid
cell ID.

A good description of the two algorithms is given on these Wikipedia
webpages:

https://en.wikipedia.org/wiki/Marching_cubes
https://en.wikipedia.org/wiki/Marching_squares :ul

The algorithm to create the implicit surfaces requires a threshold value
as input, which is the {thresh} value.  For corner point values
that bracket the threshold, it determines precisely where in the grid
cell the corner points of the inferred implicit surface(s) will be.

The threshold must be specified as a floating point value such that 0
< thresh < 255.

The specified {mode} is either {inout} or {ave}. The {inout} mode marks
corner point values whether they are inside or outside the volume or area
enclosed by the surface.  The {ave} mode averages the expected corner point
value. Corner points values are found by first determining the intersection
of each surface element with the cell edges. Corner points outside the
surface are always marked as zero. The inside corner point value is then
extrapolated from the outside corner point and the point of intersection.
For each inner corner point, the average is then found from all extrapolated
values.

:line

[Restrictions:]

This command can only be used after the simulation box is defined by
the "create_box"_create_box.html command, and after a grid has been
created by the "create_grid"_create_grid.html command. Additionally,
the explicit surfaces must already be defined by "read_surf" as well
as the fix ablate by "fix_ablate". A simulation cannot have both
explicit and implicit surfaces. The grid cannot be adapted if there
are implicit surfaces.

:line

Explicit surface must be distributed when first read in by {read_surf}.

[Related commands:]

"read_surf"_read_surf.html, "fix_ablate"_fix_ablate.html, "write_isurf"_write_isurf.html

[Default:] There are no default values
