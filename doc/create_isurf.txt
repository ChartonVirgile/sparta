"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

create_isurf command :h3

[Syntax:]

create_isurf group-ID ablateID thresh mode ... :pre

grid-ID = grid ID for which grid cells to perform calculation on :ulb,l
ablateID = ID of a "fix ablate"_fix_ablate.html command :l
thresh = threshold for surface definition, value > 0.0 and < 255.0 :l
mode = {inout} or {ave} = former marks cells either in or out. latter smooths values by averaging expected corner points values based on intersections between inputted surface and cell edge :l
:ule

[Examples:]

create_isurf     all fablate 40.0 inout
create_isurf     subset fablate 100.0 ave

[Description:]

Read the geometry of a surface from the specified file. In SPARTA, a
"surface" is a collection of surface elements that represent the
surface of one or more physical objects which will be embedded in the
global simulation box. 

This command converts explicit surfaces into implicit surfaces. Explicit
surfaces are read from a previous "read_surf" command. See
the "read_surf"_read_surf.html command to read explicit surfaces from
a different kind of file.  See the "Howto
6.13"_Section_howto.html#howto_13 section of the manual for an
explantion of explicit versus implicit surfaces as well as distributed
versus non-distributed storage.  You cannot mix explicit and implicit
surfaces in the same simulation. Thus, all explicit surfaces from all surface 
groups are converted, and no additional explicit surfaces can be added. 
While not currently implemented, additional implicit surfaces may be added
as long as the grid groups for each implicit surface group do not
overlap. 

Surface elements are triangles in 3d or line segments in 2d.  Surface
elements for each physical object are required to be a complete,
connected set that tile the entire surface of the object.  
The surface elements in a single surface file must represent a
"watertight" surface.  For a 2d simulation this means that every point
is part of exactly 2 line segments.  For a 3d simulation it means that
every triangle edge is part of exactly 2 triangles.  Exceptions to
these rules allow for triangle edges (in 3d) that lie entirely in a
global face of the simulation box, or for line points (in 2d) that are
on a global edge of the simulation box.  This can be the case after
clipping, which allows for use of watertight surface object (e.g. a
sphere) that is only partially inside the simulation box, but which
when clipped to the box becomes non-watertight, e.g. half of a sphere. 
Implicit surfaces will always be watertight, due to the algorithm that 
defines them.

Here are simulation snapshots of 2d and 3d explicit surfaces and the 
converted implicit surfaces. Click on either image for a
larger image. 

:c,image(JPG/porous2d_initial_small.png,JPG/porous2d_initial.png),image(JPG/porous3d_initial_small.png,JPG/porous3d_initial.png)

:image()

Particles collide with surface elements as they advect.  Each surface
element is assigned to a collision model, specified by the
"surf_collide"_surf_collide.html command which affects how a particle
bounces off the surface.  Each surface element can optionally be
assigned to a reaction model, specified by the
"surf_react"_surf_react.html command which determines if any surface
chemistry occurs during a collision.  Statistics for each surface
element due to their interactions with particles can be tallied via
the "compute isurf/grid"_compute_isurf_grid.html command,
time-averaged via the "fix ave/grid"_fix_ave_grid.html command, and
ouput via the "dump surface"_dump.html command.

Note that at some point, it will be possible to use the read_isurf
command multiple times to read surfaces from multiple files and add
them to the simulation domain, so long as the grid extent of the
different commands does not overlap.  However currently, that is not
yet possible.

:line

The specified {group-ID} must be the name of a grid cell group, as
defined by the "group grid"_group.html command, which contains a set
of grid cells, all of which are the same size, and which comprise a
contiguous 3d array, with specified extent {Nx} by {Ny} by {Nz}.  For
2d simulations, {Nz} must be specified as 1, and the group must
comprise a 2d array of cells that is {Nx} by {Ny}.  These are the grid
cells in which implicit surfaces will be created.

The 8 corner point values (4 in 2d) for each grid cell are used with a
marching cubes algorithm (marching squares in 2d) to infer a set of
triangles (line segments in 2d) which are created in the grid cell.

IMPORTANT NOTE: All triangles (line segments in 2d) created within the
same grid cell are assigned the same surface ID, which is the grid
cell ID.

A good description of the two algorithms is given on these Wikipedia
webpages:

https://en.wikipedia.org/wiki/Marching_cubes
https://en.wikipedia.org/wiki/Marching_squares :ul

The algorithms require a threshold value as input, which is the
{thresh} value in the read_isurf command.  For corner point values
that bracket the threshold, it determines precisely where in the grid
cell the corner points of the inferred implicit surface(s) will be.

The threshold must be specified as a floating point value such that 0
< thresh < 255.  An integer value for thresh (e.g. 128 or 128.0) is
not allowed, because that could induce implicit surfaces with zero
length (2d line) or area (3d triangle).

IMPORTANT NOTE: The aggregate set of implicit surfaces created by this
procedure must represent a watertight object(s), the same as explained
for the "read_surf"_read_surf.html command, otherwise SPARTA will
generate an error.  The marching cube and square algorithms guarantee
this.  However, if the Nx by Ny by Nz array of grid cells is interior
to the simulation box, the entire outer boundary of the Nxfile by
Nyfile by Nzfile grid of corner points should have values = 0.  This
will insure no surface element touches the outer boundary (which would
induce a non-watertight surface).  If the array of grid cells touches
the simulation box face, then this is not a requirement (the same as
if a set of explicit surfs were clipped at the box boundary).
However, if a boundary is periodic in a particular dimension and the
array of grid cells touches that boundary, then you must insure the
Nxfile by Nyfile by Nzfile grid of corner points spans that entire
dimension, and its values are periodic in the same sense the
simulation box is.  E.g. if the y dimension is periodic, then the
corner point values at the y = 1 and y = Nyfile lines or planes of the
2d or 3d corner point array must be identical.  Otherwise the
aggregate set of implicit surfaces will not be consistent across the y
periodic boundary.

The specified {ablateID} is the fix ID of a "fix
ablate"_fix_ablate.html command which has been previously specified in
the input script.  It stores the grid corner point values for each
grid cell.  It also has the code logic for converting grid corner
point values to surface elements (line segments or triangles) and also
optinally allows for the surface to be ablated during a simulation due
to particles colliding with the surface elements.

:line

The following optional keywords affect attributes of the read-in
surface elements and how they are read.

Surface groups are collections of surface elements.  Each surface
element belongs to one or more surface groups; all elements belong to
the "all" group, which is created by default.  Surface group IDs are
used by other commands to identify a group of suface elements to
operate on.  See the "group surf"_group.html command for more details.

Every surface element also stores a {type} which is a positive
integer.  {Type} values are useful for flagging subsets of elements.
For example, implicit surface elemnts in different regions of the
simulation box.  Surface element types can be used to define surface
groups.  See the "group surf"_group.html command for details.

The {group} keyword specifies an extra surface {group-ID} to which all
the implicit surface elements are assigned when created by the read-in
corner points.  All the created implicit elements are also assigned to
the "all" group and to {group-ID}.  If {group-ID} does not exist, a
new surface group is created.  If it does exist the create implicit
surface elements are added to that group.

The {type} keyword triggers the reading of a per grid cell type file
with the specified name {tfile}.  

The specified {filename} is for a binary file in the following format:

first 4 bytes = Nxfile (integer)
next 4 bytes = Nyfile (integer)
next 4 bytes = Nzfile (integer), only for 3d simulations
final N bytes = Nxfile by Nyfile by Nzfile grid corner point values (integer) :ul

For 2d simulations, the first 8 bytes store 2 integers in binary
format: Nxfile and Nyfile.  For 3d simulations, the first 12 bytes
store 3 integers in binary format: Nxfile, Nyfile, and Nzfile.  These
are the dimensions of the grid of corner point values in the remainder
of the file.

IMPORTANT NOTE: The Nxfile, Nyfile, Nzfile values are for a 2d or 3d
grid of per-cell values, which overlay the Nx by Ny by Nz grid of
cells.  Thus Nxfile = Nx, Nyfile = Ny, Nzfile = Nz is required.
SPARTA will give an error if the read_isurf Nx,Ny,Nz arguments do not
match the first 2 or 3 integers in the file.

The remaining N bytes of the file are a series of one-byte integer
values.  There are N = Nxfile * Nyfile values in 2d, and N = Nxfile *
Nyfile * Nzfile values in 3d.  Each value is a single byte integer
from 1 to 255 inclusive, since surface element type values must be >
0.

IMPORTANT NOTE: The corner point values are a 2d or 3d regular array
which must be ordered as follows.  The x indices (1 to Nxfile) vary
fastest, then the y indices (1 to Nyfile), and the z indices slowest
(1 to Nzfile).  These will be assigned to each grid cell in the Nx by
Ny by Nz simulation domain.  For mapping type values to grid cells,
the ordering of the regular array of grid cells in the simulation
domain is the same: their x indices vary fastest, then y, and their z
indices very slowest.

The type value for each grid cell is used to assign a type value to
each surface element created in that grid cell by the marching cubes
or squares algorithm.

The {push} keyword specifies whether or not ({yes} or {no}) to "push"
grid corner points values to their minimum/maximum possible values,
i.e. 0 or 255 respectively.  Each corner point value which is below
(above) the specified {thresh} value is and is also entirely
surrounded by neighbor corner point values which are also below
(above) the {thresh} value is reset to 0 (255).  In 2d, there are 8
corner points surrouding each interior corner point, i.e. all corner
points on the face of the 2x2 set of grid cells which surround the
interior point.  In 3d, there are 26 corner points surrouding each
interior corner point, i.e. all corner points on the face of the 2x2x2
set of grid cells which surround the interior point.  The purpose of
this operation is to reset corner point values to 0 if they are fully
exterior to the surface object(s), and likewise to 255 if they are
fully interior to the surface object(s).

Note that the push is a one-time operation, performed when the corner
point values are read in, before the first set of surface elements are
created by the marching cubes or marching squares algorithms.

The default for the {push} keyword is {yes}.

The {read} keyword specifies how the input file of grid corner point
values is read.  If the value is {serial}, which is the default, then
only a single proc reads the file, a chunk of values at at time.  They
are broadcast to other processors, and each scans them for corner
point values that correspond to grid cells it owns.  If the value is
{parallel}, then each proc opens the input file and reads a N/P
portion of the corner point values, where N is the # of corner point
values, and P is the # of procs.  Additional communication is then
performed to communicate the corner point values where they are needed
by each grid cell that owns one of the corner point values.  The
{parallel} option can be faster for simulations with large grid corner
point files and large numbers of processors.

:line

[Restrictions:]

This command can only be used after the simulation box is defined by
the "create_box"_create_box.html command, and after a grid has been
created by the "create_grid"_create_grid.html command. Additionally,
the explicit surfaces must already be defined by "read_surf" as well
as the fix ablate by "fix_ablate". A simulation cannot have both
explicit and implicit surfaces.

If particles
already exist in the simulation, you must insure particles do not end
up inside the set of implicit surfaces.

[Related commands:]

"read_surf"_read_surf.html, "fix ablate"_fix_ablate.html

[Default:] none
